<?php

/**
 * @file
 * Provides the base test class.
 */

/**
 * Base class for all administration menu web test cases.
 */
class FirstRemoteTestCase extends DrupalRemoteTestCase {
  public $blank = ' '; // DO NOT EDIT this character!!!

  protected $profile = 'testing';

  protected $basePermissions = array(
    'system' => 'access administration pages',
    'admin_menu' => 'access administration menu',
  );

  function setUp() {
    // Enable admin menu module and any other modules.
    $modules = func_get_args();
    $modules = isset($modules[0]) ? $modules[0] : $modules;
//     $modules[] = 'admin_menu';
    parent::setUp($modules);

    // Disable client-side caching.
//     variable_set('admin_menu_cache_client', FALSE);
    // Disable Clean URLs to ensure drupal.org testbot compatibility.
    variable_set('clean_url', 0);
  }

  /**
   * Check that an element exists in HTML markup.
   *
   * @param $xpath
   *   An XPath expression.
   * @param array $arguments
   *   (optional) An associative array of XPath replacement tokens to pass to
   *   DrupalWebTestCase::buildXPathQuery().
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertElementByXPath($xpath, array $arguments = array(), $message = '', $group = 'Other') {
    $elements = $this->xpath($xpath, $arguments);
if (empty($elements[0])) {
  $this->pass($message, 'assertElementByXPath');
}
    return $this->assertTrue(!empty($elements[0]), $message, $group);
  }

  /**
   * Check that an element does not exist in HTML markup.
   *
   * @param $xpath
   *   An XPath expression.
   * @param array $arguments
   *   (optional) An associative array of XPath replacement tokens to pass to
   *   DrupalWebTestCase::buildXPathQuery().
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertNoElementByXPath($xpath, array $arguments = array(), $message = '', $group = 'Other') {
    $elements = $this->xpath($xpath, $arguments);
    return $this->assertTrue(empty($elements), $message, $group);
  }

  /**
   * Asserts that links appear in the menu in a specified trail.
   *
   * @param array $trail
   *   A list of menu link titles to assert in the menu.
   */
  protected function assertLinkTrailByTitle(array $trail) {
    $xpath = array();
    $args = array();
    $message = '';
    foreach ($trail as $i => $title) {
      $xpath[] = '/li/a[text()=:title' . $i . ']';
      $args[':title' . $i] = $title;
      $message .= ($i ? ' » ' : '') . check_plain($title);
    }
    $xpath = '//div[@id="admin-menu"]/div/ul' . implode('/parent::li/ul', $xpath);
    $this->assertElementByXPath($xpath, $args, $message . ' link found.');
  }

  /**
   * Asserts that no link appears in the menu for a specified trail.
   *
   * @param array $trail
   *   A list of menu link titles to assert in the menu.
   */
  protected function assertNoLinkTrailByTitle(array $trail) {
    $xpath = array();
    $args = array();
    $message = '';
    foreach ($trail as $i => $title) {
      $xpath[] = '/li/a[text()=:title' . $i . ']';
      $args[':title' . $i] = $title;
      $message .= ($i ? ' » ' : '') . check_plain($title);
    }
    $xpath = '//div[@id="admin-menu"]/div/ul' . implode('/parent::li/ul', $xpath);
    $this->assertNoElementByXPath($xpath, $args, $message . ' link not found.');
  }

  /**
   * Pass if image tag is found with the specified source (other than token).
   *
   * @param $xpath
   *   An XPath expression.
   * @param $label
   *   Source string in the image tags.
   * @param $index
   *   Image tag position counting from zero.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertImage($xpath, $label, $index = 0, $message = '', $group = 'Other') {
//     $links = $this->xpath($xpath . '//img[starts-with(@src,:label)]', array(':label' => $label));
//     $this->verbose(print_r($links, 1) . "\nisset links index = " . isset($links[$index]));
    $links = $this->xpath($xpath . '//img[contains(@src,:label)]', array(':label' => $label));
//     $this->verbose(print_r($links, 1) . "\nisset links index = " . isset($links[$index]));
//     $this->verbose(print_r($links, 1));
    $message = ($message ?  $message : t('Image found with source: %label.', array('%label' => $label)));
    return $this->assert(isset($links[$index]), $message, $group);
  }
}
