 <?php

/**
 * @file
 * Tests for the blocks on home page.
 */

/**
 * Tests menu links depending on user permissions.
 */
class PestSampler_Notes_Registered_TestCase extends FirstRemoteTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Pest Sampler Notes Registered Test',
      'description' => 'Tests notes page of the Pest Sampler wizard when logged in',
      'group' => 'iWheat',
    );
  }

  function setUp() {
    parent::setUp(array('node'));
  }

  /**
   * Test that the links are added to the page (no JS testing).
   */
  function testSamplerNotesPage() {
    module_enable(array('contact'));
    $this->resetAll();
    
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }

    $edit = array(
      'name' => '',
      'pass' => ''
    );
    
    $this->drupalPost('user', $edit, 'Log in');

    // If a "log out" link appears on the page, it is almost certainly because
    // the login was successful.
    $pass = $this->assertLink('Log Out', 0, 'User successfully logged in.', 'Other');

    // Check section header and home page link to ensure they are correct
    $this->drupalGet('http://dev.iwheat.org/pest_sampler/nojs/greenbug/notes');
    
    $this->checkPageSites();
  }
  
  function setUpSampler()
  {
    $edit = array('field_samples_method[und]' => t('12212'));
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertElementByXPath('//div[@id="edit-field-samples-location"]', array(), 'The map was displayed after first page');
    
    $edit = array('field_samples_location[und][0][geom]' => t('POINT (-96.572573 39.198664)'));
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('Add field site');
    
    $edit = array('field_samples_field_site[und]' => t('12212'));
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('Control Cost');
    
    $edit = array('step[control_cost]' => t('4.00'), 'step[crop_value]' => t('2.50'));
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('Stop 1 of 5');
  }

  function checkPageSites() {
  
    $base_path = '//div[@id="block-system-main"]//div[@class="block-inner clearfix"]//div[@class="content clearfix"]//div[@id="wizard-form-wrapper"]//form[@id="pest-sampler-wizard-step-form"]//div';
  
    //Check that the wizard "trail" section displays correctly
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Method', 'Wizard Trail 1st Step display correct.');
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Location', 'Wizard Trail 2nd Step display correct.');
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Site', 'Wizard Trail 3rd Step display correct.');
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Costs', 'Wizard Trail 4th Step display correct.');
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Samples', 'Wizard Trail 5th Step display correct.');
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Notes', 'Wizard Trail 6th Step display correct.');
    $this->assertFieldByXPath($base_path . '//div[@class="wizard-trail"]//span', 'Finish', 'Wizard Trail 7th Step display correct.');
    
    $base_path = $base_path . '//fieldset[@id="edit-step"]//div[@class="fieldset-wrapper"]';
    
    // Check that the show notes check box appears correctly 
    $this->assertElementByXPath($base_path . '//div//input[@id="show-notes-enabled"]', array(), 'Show notes check box found');
    $this->assertFieldByXPath($base_path . '//div//label[@for="show-notes-enabled"]', 'Show notes ', 'Show notes text found');
    
    //Check that the Notes text box appears correctly
    $this->assertFieldByXPath($base_path . '//div//label[@for="edit-step-show-notes-options-notes"]', 'Notes ', 'Notes text found');
    $this->assertElementByXPath($base_path . '//div//textarea[@id="edit-step-show-notes-options-notes-wrapper"]', array(), 'Notes text box found');
    
    // Check that the show notes check box appears correctly 
    $this->assertElementByXPath($base_path . '//div//input[@id="show-pests-enabled"]', array(), 'Show pests check box found');
    $this->assertFieldByXPath($base_path . '//div//label[@for="show-pests-enabled"]', 'Show pests ', 'Show pests text found');
    
    //Check that the Other Pests Observed Text appears
    $this->assertFieldByXPath($base_path . '//div[@class="fieldset-description"]', 'Other pests observed', 'Other pests observed text found');
    
    // Check that the Army Cutworm check box appears correctly 
    $this->assertElementByXPath($base_path . '//div//input[@id="edit-step-show-pests-options-pest-2405"]', array(), 'Army Cutworm check box found');
    $this->assertFieldByXPath($base_path . '//div//label[@for="edit-step-show-pests-options-pest-2405"]', 'Army Cutworm ', 'Army Cutworm text found');
    
    $base_url = variable_get('simpletest_remote_url', '');
    $base_url = $base_url ? $base_url : 'dev.iwheat.org';
    $this->pass($base_url, 'base_url');
    
    //checks for the Army Cutworm image
    $url = "http://$base_url/sites/default/files/styles/medium/public/ArmyCutwormPic.png?itok=PJ2XGnWO";
    $xpath = '//div[contains(@class,"form-item form-type-item")]';
    $this->assertImage($xpath, $url, 0, 'Found image with full URL', $group = 'Special');
    $url = 'ArmyCutwormPic.png';
    $this->assertImage($xpath, $url, 0, 'Found image with file name', $group = 'Special');
    
    // Check that the Armyworm check box appears correctly 
    $this->assertElementByXPath($base_path . '//div//input[@id="edit-step-show-pests-options-pest-2407"]', array(), 'Armyworm check box found');
    $this->assertFieldByXPath($base_path . '//div//label[@for="edit-step-show-pests-options-pest-2407"]', 'Armyworm ', 'Armyworm text found');
    
    //checks for the Armyworm image
    $url = "http://$base_url/sites/default/files/styles/medium/public/ArmywormPic.png?itok=rYPhJ0gP";
    $xpath = '//div[contains(@class,"form-item form-type-item")]';
    $this->assertImage($xpath, $url, 0, 'Found image with full URL', $group = 'Special');
    $url = 'ArmyCutwormPic.png';
    $this->assertImage($xpath, $url, 0, 'Found image with file name', $group = 'Special');
    
    
    $base_path = '//div[@id="block-system-main"]//div[@class="block-inner clearfix"]//div[@class="content clearfix"]//div[@id="wizard-form-wrapper"]//form[@id="pest-sampler-wizard-step-form"]//div';
      
      //Check that the Continue, Cancel, and Back buttons appear
      $this->assertElementByXPath($base_path . '//div//input[@value="Continue"]', array(), 'Continue button displays correctly.');
      $this->assertElementByXPath($base_path . '//div//input[@value="Cancel"]', array(), 'Cancel button displays correctly.');
      $this->assertElementByXPath($base_path . '//div//input[@value="Back"]', array(), 'Back button displays correctly.');  
      
      // Select the Continue button and verify that the Location page appears
    $edit = array('field_samples_method[und]' => t('12212'));
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('My Tool Shed');
    
    // Return to the Location page
    // Return to the Samples page
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Back'));
    $this->assertText('Stop 5 of 5');
    
    // Click the Cancel button and check that you are redirected to the home page.
    $edit = array('field_samples_method[und]' => t('12212'));
    $this->drupalPost(NULL, $edit, t('Cancel'));
    $this->assertFieldByXPath('//h1[@id="page-title"]', 'Welcome to iWheat.org!', 'Home page title was displayed after clicking Cancel.');
      
      
    }
}
